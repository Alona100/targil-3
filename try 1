#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/wait.h>

#define NUM_PROCESSES 100


void sem_wait(int semid) {
    struct sembuf p = {0, -1, 0};
    semop(semid, &p, 1);
}

void sem_signal(int semid) {
    struct sembuf v = {0, 1, 0};
    semop(semid, &v, 1);
}

int main() {
    int shm_id, sem_id;
    int *shared_sum;


    shm_id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666);
    if (shm_id == -1) {
        fprintf(stderr, "semctl: %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }


    shared_sum = (int *)shmat(shm_id, NULL, 0);
    if (shared_sum == (void *)-1) {
        fprintf(stderr, "semctl: %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

    *shared_sum = 0; 

 
    sem_id = semget(IPC_PRIVATE, 1, IPC_CREAT | 0666);
    if (sem_id == -1) {
       fprintf(stderr, "semctl: %s\n", strerror(errno));
       fflush(stdout);
        exit(1);
    }


    if (semctl(sem_id, 0, SETVAL, 1) == -1) {
        fprintf(stderr, "semctl: %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

 
    for (int i = 1; i <= NUM_PROCESSES; i++) {
        pid_t pid = fork();
        if (pid < 0) {
            fprintf(stderr, "semctl: %s\n", strerror(errno));
            fflush(stdout);
            exit(1);
        } else if (pid == 0) {
         
            sem_wait(sem_id);
            *shared_sum += i;
            sem_signal(sem_id);

            shmdt(shared_sum);
            exit(0);
        }
    }


    for (int i = 0; i < NUM_PROCESSES; i++) {
        wait(NULL);
    }

    printf("Sum from 1 to 100 is: %d\n", *shared_sum);  


    shmdt(shared_sum);
    shmctl(shm_id, IPC_RMID, NULL);
    semctl(sem_id, 0, IPC_RMID);

    return 0;
}
