#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <semaphore.h>
#include <fcntl.h>

#define NUM_PROCESSES 100

int main() {
    int shm_id;
    int *shared_sum;

  
    shm_id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666);
    if (shm_id < 0) {
        perror("shmget failed");
        exit(1);
    }

    shared_sum = (int *)shmat(shm_id, NULL, 0);
    if (shared_sum == (int *)-1) {
        perror("shmat failed");
        exit(1);
    }

    *shared_sum = 0; 

  
    sem_t *sem = sem_open("/sum_sem", O_CREAT | O_EXCL, 0644, 1);
    if (sem == SEM_FAILED) {
        perror("sem_open failed");
        shmctl(shm_id, IPC_RMID, NULL);
        exit(1);
    }

  
    for (int i = 1; i <= NUM_PROCESSES; i++) {
        pid_t pid = fork();
        if (pid < 0) {
            perror("fork failed");
            exit(1);
        } else if (pid == 0) {
            

        
            sem_wait(sem);
            *shared_sum += i;
            sem_post(sem);

         
            exit(0);
        }
    }

   
    for (int i = 0; i < NUM_PROCESSES; i++) {
        wait(NULL);
    }

    printf("Sum from 1 to 100 is: %d\n", *shared_sum);

  
    shmdt(shared_sum);
    shmctl(shm_id, IPC_RMID, NULL);
    sem_close(sem);
    sem_unlink("/sum_sem");

    return 0;
}
