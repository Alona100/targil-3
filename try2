#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <errno.h>
#include <string.h>



void sem_op(int semid, int op) {
    struct sembuf sb = {0, op, 0};
    if (semop(semid, &sb, 1) == -1) {
        fprintf(stderr, "semop error: %s\n", strerror(errno));
        exit(1);
    }
}

int main() {
    key_t shm_key = ftok(".", 'S');
    key_t sem_key = ftok(".", 'M');

   
    int shmid = shmget(shm_key, sizeof(int), IPC_CREAT | 0666);
    if (shmid == -1) {
        fprintf(stderr, "shmget: %s\n", strerror(errno));
        exit(1);
    }

   
    int *sum = (int *)shmat(shmid, NULL, 0);
    if (sum == (void *)-1) {
        fprintf(stderr, "shmat: %s\n", strerror(errno));
        exit(1);
    }
    *sum = 0; 

   
    int semid = semget(sem_key, 1, IPC_CREAT | 0666);
    if (semid == -1) {
        fprintf(stderr, "semget: %s\n", strerror(errno));
        exit(1);
    }

   
    if (semctl(semid, 0, SETVAL, 1) == -1) {
        fprintf(stderr, "semctl: %s\n", strerror(errno));
        exit(1);
    }

  
    for (int i = 1; i <= 100; i++) {
        pid_t pid = fork();

        if (pid == -1) {
            fprintf(stderr, "fork: %s\n", strerror(errno));
            exit(1);
        } else if (pid == 0) {
       
            sem_op(semid, -1); 
            *sum += i;
            sem_op(semid, 1);  
            exit(0);
        }
    }

   
    for (int i = 0; i < 100; i++) {
        wait(NULL);
    }

  
    printf(" %d\n", *sum);

    
    shmdt(sum);
    shmctl(shmid, IPC_RMID, NULL);
    semctl(semid, 0, IPC_RMID);

    return 0;
}
