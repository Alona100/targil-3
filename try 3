#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/wait.h>
#include <errno.h>
#include <string.h>

void wait_on_semaphore(int semid) {
    struct sembuf op = {0, -1, 0};
    semop(semid, &op, 1);
}

void signal_semaphore(int semid) {
    struct sembuf op = {0, 1, 0};
    semop(semid, &op, 1);
}

int main() {
    int shm_id, sem_id;
    int *sum_ptr;

    shm_id = shmget(IPC_PRIVATE, sizeof(int), IPC_CREAT | 0666);
    if (shm_id == -1) {
        fprintf(stderr, "%s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

    sum_ptr = (int *)shmat(shm_id, NULL, 0);
    if (sum_ptr == (void *)-1) {
        fprintf(stderr, " %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

    *sum_ptr = 0;

    
    sem_id = semget(IPC_PRIVATE, 1, IPC_CREAT | 0666);
    if (sem_id == -1) {
        fprintf(stderr, " %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

    if (semctl(sem_id, 0, SETVAL, 1) == -1) {
        fprintf(stderr, " %s\n", strerror(errno));
        fflush(stdout);
        exit(1);
    }

    for (int i = 1; i <= 100; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            fprintf(stderr, " %s\n", strerror(errno));
            fflush(stdout);
            exit(1);
        } else if (pid == 0) {
            wait_on_semaphore(sem_id);
            *sum_ptr += i;
            signal_semaphore(sem_id);

            shmdt(sum_ptr);
            exit(0);
        }
    }

    for (int i = 0; i < 100; i++) {
        wait(NULL);
    }

    printf("%d\n", *sum_ptr);

  
    shmdt(sum_ptr);
    shmctl(shm_id, IPC_RMID, NULL);
    semctl(sem_id, 0, IPC_RMID);

    return 0;
}
